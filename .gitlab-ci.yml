stages:
  - install
  - build
  - test

# variables:
#   GIT_SSL_NO_VERIFY: "true"

# Global cache settings for all jobs
# Ensure compatibility with the install job
# Goal: the install job loads the cache and
# all other jobs can only use it
cache:
  # Most npm libraries will only have 1 entry for the base project deps
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
  policy: pull  # Prevent subsequent jobs from modifying cache

install:
  image: node:20.15.1
  stage: install
  cache:
    # Mimic the global cache config but override policy
    # to allow this job to update the cache at the end of the job
    # and only update if it was a successful job (#5)
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules/
      when: on_success
      policy: pull-push
    # Store npm cache for all branches (stores download pkg.tar.gz's)
    # Will not be necessary for any other job
    - key: ${CI_JOB_NAME}
      # Must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
      paths:
        - .npm/
      when: on_success
      policy: pull-push
  script:
    # Define cache dir & use it npm!
    - npm ci --cache .npm --prefer-offline

build:
  image: node:20.15.1
  stage: build
  # Global cache settings are inherited to grab `node_modules`
  script:
    - npm run build
  artifacts:
    paths:
      - .next/  # Next.js stores build results in .next

test:
  image: node:20.15.1
  stage: test
  # Global cache settings are inherited to grab `node_modules`
  needs:
    - job: build
      artifacts: true  # Grabs built files
  script:
    - npm test

# deploy:
#   stage: deploy
#   when: on_success # Only if previous stages' jobs all succeeded
#   # Override inherited cache settings since node_modules is not needed
#   cache: {}
#   needs:
#     - job: build
#       artifacts: true  # Grabs .next/
#   script:
#     - npm publish